@startuml "API__procesos"

!define SHOW_PART_PROCESOS 1



package "com.metrolink.ami_api" {

    package "com.metrolink.ami_api.config"{
        class LoggerConfigProcesos #05f7c3 {

            -static final Logger logger
            +static Logger getLogger()



        }

    }

    package "com.metrolink.ami_api.models" #f1f5f0{


        package "com.metrolink.ami_api.models.medidor"{
            class Medidores #FFFFBA {
                - vcSerie: String
                - vcidCliente: String
                - vcdescripcion: String
                + MarcasMed marcaMed
                - lisMacro: Boolean
                - vclongitudLatitud: String
                - vcfechaInstalacion: String
                + Estados estado
                + UbicacionesEnInfra ubicacionEnInfra
                - vcfechaHoraUltimaLectura: String
                - vcdíasdeRegDíariosMensuales: String
                - vcdiasdeEventos: String
                - vcperiodoIntegracion: String
                - vcultimoEstadoRele: String
                - vcfirmware: String
                + ViasObtencionDatos viaObtencionDatos
                + Concentradores concentrador
                + CanalesDeComunicacion CanalDeComunicacion
                - vcip : String
                - vcpuerto: String
                + TiposDeModuloDeCom tipoDeModuloDeCom
                + ConfiguracionProtocolo configuracionProtocolo
                + ParamAdvMed paramAdvMed
                + AgendaProgramacionesAMI AgendaProgramacionAMI
                - vcsic: String
                + CanalesPerfilCarga canalesPerfilCarga
                @Transient
                - esExistente: Boolean

            }

            class CanalesPerfilCarga #c1bbc9 {
                - nid: Long
                + CodigosObisCanal codigosObisCanal_1
                + CodigosObisCanal codigosObisCanal_2
                + CodigosObisCanal codigosObisCanal_3

            }

            class CodigosObisCanal #c1bbc9{
                - nid: Long
                - vcobis_1: String
                - vcobis_2: String
                - vcobis_3: String
                - vcobis_4: String
                - vcobis_5: String
                - vcobis_6: String
                - vcobis_7: String
                - vcobis_8: String
                - vcobis_9: String
                - vcobis_10: String
            } 
            
        }
        package "com.metrolink.ami_api.models.concentrador" #d7f7e6{
            class Concentradores #FFB3BA {
                @Id
                -vcnoSerie: String
                --
                -vcdescripcion: String
                + Marcas marcas
                + Empresas Empresas
                --
                -vccodigoCaja: String
                -vclongitudLatitud: String
                -vcfechaInstalacion: String
                --
                + Estados estado
                + CanalesDeComunicacion CanalDeComunicacion
                + ConfiguracionProtocolo configuracionProtocolo
                + ParamTiposDeComunicacion paramTiposDeComunicacion
                + ParamAdvCon paramAdvCon
            }
        }

        package "com.metrolink.ami_api.models.procesos"{
            package "com.metrolink.ami_api.models.procesos.primeralectura.autoConfigMed"{
            }

            package "com.metrolink.ami_api.models.procesos.programacionesAmi"{
                class ProgramacionesAMI  #ffdee8 {
                    - ncodigo : Long
                    + GruposMedidores grupoMedidores
                    + ListasPeticiones listaPeticiones
                    - vcestado: String
                    + ParametrizacionesProg parametrizacionProg
                }

                class AgendaProgramacionesAMI  #e8ffde {
                    - ncodigo : Long
                    + ProgramacionesAMI ProgramacionAMI
                    + EstadosHoy estadoHoy
                    + Proximos proximo


                }

                class EstadosHoy{
                    - ncodigo: Long
                    - EstadosAgenda estadoAgenda
                    - Proximo: boolean
                    - fechaProximo: Date
                    - horaProximo: Date
                }
                class EstadosAgenda{
                    - ncodigo: Long
                    - estados: String

                }

                class ListasPeticiones  #ff6b6b {
                    - lectura_perfil_1 :  boolean
                    - eventos : boolean
                    - registros : boolean
                    - factorPotencia : boolean
                    - instantaneos : boolean
                    + Rele rele
                    + SinconizacionReloj sincronizacionReloj
                }

                class Rele{
                    - accion: String
                }

                class SinconizacionReloj{
                    - fecha: Date
                    - hora: Date
                }
            }


            class GrupoMedidores #6ae7f7{
                id: long
                filtro: String
                SeriesMed: String
            }


        }
        package "com.metrolink.ami_api.models.tablasFrontMed" #f595c2 {
            class ViasObtencionDatos #fcce7e{
                -ncodigo: Long
                -vcviaObtencionDatos : String
                -vcconcat : String
            }
        }
    }


    package "com.metrolink.ami_api.controllers" #c4eef5{

        package "com.metrolink.ami_api.controllers.concentrador" #d7f7e6{
            class ConcentradoresController #FFB3BA  {
                + ConcentradoresService concentradoresService
                * createConcentrador(concentrador: Concentrador): Concentrador
                * getAllConcentradores() : List<Concentrador>
                * getConcentradorById(id: Long) : Concentrador
                * updateConcentrador(id: Long, concentradorDetails:  Concentrador) : Concentrador
                * deleteConcentrador(id: Long) : void
            }
        }

        package "com.metrolink.ami_api.controllers.medidor"{
            class MedidoresController #FFFFBA{
                + MedidoresService medidoresService
                * createMedidor(medidores: Medidores): Medidores
                * getAllMedidores() : List<Medidores>
                * getMedidorById(vcSerie: String) : Medidores
                * updateMedidor(vcSerie: String, medidorDetails:  Medidores) : Medidores
                * deleteMedidor(vcSerie: String) : void
            }
        }

        !if SHOW_PART_PROCESOS
        package "com.metrolink.ami_api.controllers.procesos"{
            package "com.metrolink.ami_api.controllers.procesos.deteccionMed"{
                class DeteccionMedController #cfd4fc{
                    + DeteccionMedService deteccionMedService
                    * recibirConcentrador(request: HttpServletRequest): ResponseEntity<List<Medidores>>

                }
            }
            package "com.metrolink.ami_api.controllers.procesos.autoConfigMed"{
                class AutoConfigMedController #fcf0cf {

                }
            }
        }
        !endif
    }

    package "com.metrolink.ami_api.services" #f5d0d0 {

        package "com.metrolink.ami_api.services.concentrador" #d7f7e6 {
            class ConcentradoresService #FFB3BA {
                + ConcentradoresRepository concentradoresRepository
                * save(concentrador: Concentrador, isUpdate : boolean ): Concentrador
                * findAll() : List<Concentrador>
                * findById(id: Long) : Optional<Concentrador>
                * update(vcnoSerie: String, concentradorDetails: Concentradores  )
                * deleteById(id : Long): void
            }
        }

        package "com.metrolink.ami_api.services.medidor"  {
            class MedidoresService #FFFFBA {
                + MedidoresRepository medidoresRepository
                * save(medidores: Medidores, isUpdate : boolean ): Medidores
                * findAll() : List<Medidores>
                * findById(vcSerie: String) : Optional<Medidores>
                * update(vcSerie: String, medidorDetails: Medidores)
                * deleteById(vcSerie : String): void
            }
        }

        !if SHOW_PART_PROCESOS
        package "com.metrolink.ami_api.services.procesos"{
            package "com.metrolink.ami_api.services.procesos.deteccionMed"{
                class DeteccionMedService #cfd4fc{
                    + ConectorDetecMedService conectorDetecMedService
                    + MedidoresService medidoresService
                    + ConcentradoresService concentradoresService
                    - static final Logger logger = LoggerConfigProcesos
                    * procesarDeteccionByCon(json: String): List<Medidores>
                }
                class ConectorDetecMedService #84f086{
                    "Metodo Provicional"
                    * usarConectorDeteccion(json: String): String
                }
            }
            package "com.metrolink.ami_api.services.procesos.autoConfigMed"{
                class AutoConfigMedService #fcf0cf {
                }
                class ConectorAutoConfigMedService #84f086{
                }
            }
        }
        !endif
    }

    package "com.metrolink.ami_api.comunications" {
        package "com.metrolink.ami_api.comunications.tcp" {
            class TcpClientService {
            }
        }
    }

    package "com.metrolink.ami_api.repositories" #fdffd9{

        package "com.metrolink.ami_api.repositories.concentrador" #d7f7e6 {
            interface ConcentradoresRepository #FFB3BA {
            }
        }

        package "com.metrolink.ami_api.repositories.medidor"  {
            interface MedidoresRepository #FFFFBA {
            }
        }

        package "com.metrolink.ami_api.repositories.procesos"  {
            package "com.metrolink.ami_api.repositories.procesos.autoConfigMed" {
                interface AutoConfigMedRepository #fcf0cf {
                }
            }
        }
    }

}








ConcentradoresController -> ConcentradoresService : usa
ConcentradoresService --> Concentradores : usa
ConcentradoresService -> ConcentradoresRepository : usa


MedidoresController -> MedidoresService : usa
MedidoresService --> Medidores : usa
MedidoresService -> MedidoresRepository : usa

DeteccionMedController -> DeteccionMedService : usa
DeteccionMedService --> MedidoresRepository : usa
DeteccionMedService -> ConcentradoresRepository  : usa
DeteccionMedService --> Medidores : usa
DeteccionMedService --> Concentradores : usa
DeteccionMedService <-> ConectorDetecMedService : usa json
DeteccionMedService -> LoggerConfigProcesos: usa


AutoConfigMedController --> ConectorAutoConfigMedService : usa
AutoConfigMedService -> AutoConfigMedRepository : usa
AutoConfigMedService <-> ConectorAutoConfigMedService : usa




ProgramacionesAMI --> GrupoMedidores: contiene
ProgramacionesAMI --> ListasPeticiones: contiene
ListasPeticiones -- Rele: contiene
ListasPeticiones -- SinconizacionReloj: contiene


AgendaProgramacionesAMI -> ProgramacionesAMI: contiene
AgendaProgramacionesAMI --> EstadosHoy: contiene
EstadosHoy -> EstadosAgenda: contiene


Medidores --> AgendaProgramacionesAMI: contiene

Medidores -> CanalesPerfilCarga: contiene

CanalesPerfilCarga -> CodigosObisCanal: contiene
CanalesPerfilCarga -> CodigosObisCanal: contiene
CanalesPerfilCarga -> CodigosObisCanal: contiene


@enduml
